#!/usr/bin/env node
import prompts from "prompts";
import { mkdirSync, writeFileSync, existsSync, readFileSync } from "fs";
import { join } from "path";
import { execSync } from "child_process";

const DEMO_HTTP = `import { t, HttpContext } from '../../../framework';

export const GET_config = {
  response: t.object({ message: t.string() }),
};

export async function GET(ctx: HttpContext) {
  return Response.json({ message: 'Hello from HTTP demo!' });
}
`;

const DEMO_WS = `export function open(ws) {
  ws.send('Welcome to the WebSocket demo!');
}
export function message(ws, msg) {
  ws.send('Echo: ' + msg);
}
`;

const DEMO_TRPC = `export const appRouter = {
  hello: {
    input: (input) => input,
    resolve: ({ input }) => ({ greeting: 'Hello, ' + (input?.name || 'world') + '!' }),
  },
};
`;

const DEMO_TCP = `export function data(socket, data) {
  socket.write(data); // Echo TCP demo
}
`;

const DEMO_MIDDLEWARE = `export default function middleware(ctx, next) {
  // Example middleware
  return next();
}
`;

const BREEZE_CONFIG = `{
  "apiDir": "src/routes",
  "tcpDir": "src/tcp",
  "plugins": []
}
`;

const PRISMA_DB_INDEX = `import { PrismaClient } from '../client';

export const db = new PrismaClient();
export default db;
`;

const DRIZZLE_SCHEMA = `import { integer, sqliteTable, text } from 'drizzle-orm/sqlite-core';

export const users = sqliteTable('users', {
  id: integer('id').primaryKey(),
  name: text('name'),
});
`;

const DRIZZLE_DB_INDEX = `import { drizzle } from 'drizzle-orm/bun-sqlite';
import { Database } from 'bun:sqlite';
import * as schema from './schema';

const sqlite = new Database('sqlite.db');
export const db = drizzle(sqlite, { schema });
export default db;
`;

async function main() {
  const { command } = await prompts({
    type: "select",
    name: "command",
    message: "What do you want to do?",
    choices: [
      { title: "init", value: "init" },
    ],
  });

  if (command === "init") {
    const { name } = await prompts({
      type: "text",
      name: "name",
      message: "Project name:",
      initial: "my-breeze-app",
    });

    const { orm } = await prompts({
      type: "select",
      name: "orm",
      message: "Select an ORM:",
      choices: [
        { title: "None", value: "none" },
        { title: "Prisma", value: "prisma" },
        { title: "Drizzle", value: "drizzle" },
      ],
      initial: 0,
    });

    // Directory structure
    const root = name;
    const src = join(root, "src");
    const routes = join(src, "routes", "demo");
    const middleware = join(src, "middleware");
    const tcp = join(src, "tcp", "demo");
    const dbDir = join(src, "db");

    mkdirSync(routes, { recursive: true });
    mkdirSync(middleware, { recursive: true });
    mkdirSync(tcp, { recursive: true });
    mkdirSync(dbDir, { recursive: true });

    // Demo protocol files
    writeFileSync(join(routes, "route.ts"), DEMO_HTTP);
    writeFileSync(join(routes, "socket.ts"), DEMO_WS);
    writeFileSync(join(routes, "trpc.ts"), DEMO_TRPC);
    writeFileSync(join(middleware, "index.ts"), DEMO_MIDDLEWARE);
    writeFileSync(join(tcp, "handler.ts"), DEMO_TCP);

    // ORM setup
    let ormDeps: string[] = [];
    if (orm === "prisma") {
      writeFileSync(join(dbDir, "index.ts"), PRISMA_DB_INDEX);
      ormDeps = ["prisma", "@prisma/client"];
    } else if (orm === "drizzle") {
      writeFileSync(join(dbDir, "schema.ts"), DRIZZLE_SCHEMA);
      writeFileSync(join(dbDir, "index.ts"), DRIZZLE_DB_INDEX);
      ormDeps = ["drizzle-orm", "drizzle-orm/bun-sqlite", "bun:sqlite"];
    }

    // breeze.config
    writeFileSync(join(root, "breeze.config"), BREEZE_CONFIG);

    // README
    writeFileSync(join(root, "README.md"), `# ${name}\nGenerated by Breeze CLI\n`);

    // package.json
    const pkgPath = join(root, "package.json");
    let pkg;
    if (!existsSync(pkgPath)) {
      pkg = {
        name,
        version: "0.1.0",
        type: "module",
        main: "src/index.ts",
        scripts: {
          start: "bun src/index.ts"
        },
        dependencies: {},
      };
    } else {
      pkg = JSON.parse(readFileSync(pkgPath, "utf8"));
      if (!pkg.dependencies) pkg.dependencies = {};
    }
    // Add ORM dependencies
    for (const dep of ormDeps) {
      pkg.dependencies[dep] = "*";
    }
    writeFileSync(pkgPath, JSON.stringify(pkg, null, 2));

    // Try to update entry file if specified in package.json
    if (pkg.main && existsSync(join(root, pkg.main))) {
      const entryPath = join(root, pkg.main);
      let entry = readFileSync(entryPath, "utf8");
      if (!entry.includes("demo")) {
        entry += `\n// Demo routes registered by Breeze CLI\n// app.registerPlugin(docs({ http: true, tcp: true, ws: true, trpc: true }));\n`;
        writeFileSync(entryPath, entry);
      }
    } else {
      // Create a minimal entry file if not present
      const entryPath = join(root, "src", "index.ts");
      if (!existsSync(entryPath)) {
        mkdirSync(join(root, "src"), { recursive: true });
        writeFileSync(entryPath, `import { createApp, docs } from '../../../framework';\n\nconst app = createApp();\napp.registerPlugin(docs({ http: true, tcp: true, ws: true, trpc: true }));\napp.start();\n`);
      }
    }

    // Run bun install in the new project
    try {
      console.log("\nInstalling dependencies with bun install...\n");
      execSync("bun install", { cwd: root, stdio: "inherit" });
    } catch (e) {
      console.error("bun install failed. Please run it manually in the project directory.");
    }

    // Print DB import info
    if (orm === "prisma" || orm === "drizzle") {
      console.log(`\nTo use your ORM client, import { db } from './src/db' in your project files.`);
    }

    console.log(`\nProject ${name} initialized!`);
  }
}

main(); 